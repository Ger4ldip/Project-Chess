from time import perf_counter
result = '*'
move_number = 1
move_turn = 1
moves50 = 0
cast = [False, False, False, False]  # into True and False
enpassant = []
fen = ''
start_fen = ''
depth = 5
reached_depth = 0
filename = ["first.txt", "second.txt"]
material_imbalance = False
fen_same = []
Board = []
pawn_value = 100
bishop_value = 320
knight_value = 300
rook_value = 500
queen_value = 900
king_value = 30000
king_coord = []
opposite_king_coord = []


def castle_check():
    global cast
    if Board[7][4] == '.' or Board[7][4].__str__() != 'K':
        cast[0] = False
        cast[1] = False
    if cast[0] != 0 and (Board[7][7] == '.' or Board[7][7].__str__() != 'R'):
        cast[0] = False
    if cast[1] != 0 and (Board[7][0] == '.' or Board[7][0].__str__() != 'R'):
        cast[1] = False
    if Board[0][4] == '.' or Board[0][4].__str__() != 'k':
        cast[2] = False
        cast[3] = False
    if cast[2] != 0 and (Board[0][7] == '.' or Board[0][7].__str__() != 'r'):
        cast[2] = False
    if cast[3] != 0 and (Board[0][0] == '.' or Board[0][0].__str__() != 'r'):
        cast[3] = False


def castle_m(color):
    take_moves = simple_move(1 - color)
    castle_possibility = []
    if cast[(1 - color) * 2] != 0 and Board[color * 7][5] == '.' and [color * 7, 5] not in take_moves and \
            Board[color * 7][6] == '.' and [color * 7, 6] not in take_moves:
        castle_possibility.append('short_castle')
    if cast[(1 - color) * 2 + 1] != 0 and Board[color * 7][3] == '.' and [color * 7, 3] not in take_moves and \
            Board[color * 7][2] == '.' and [color * 7, 2] not in take_moves and Board[color * 7][1] == '.' and [
        color * 7, 1] not in take_moves:
        castle_possibility.append('long_castle')
    return castle_possibility


def simple_move(color):
    moves = []
    a = 0
    b = 0
    while a < 8:
        while b < 8:
            if Board[a][b] != '.' and Board[a][b].color == color and Board[a][b].moves() != []:
                moves += Board[a][b].moves()
            b += 1
        b = 0
        a += 1
    return moves


def check(color):
    global king_coord, opposite_king_coord
    is_check = 0
    moves = simple_move(1 - color)
    absx = abs(opposite_king_coord[0] - king_coord[0])
    absy = abs(opposite_king_coord[1] - king_coord[1])
    if (absy == 1 and absx == 0) or (absy == 0 and absx == 1) or (absy == 1 and absx == 1):
        is_check = 1
        return is_check
    for h in range(len(moves)):
        if [moves[h][2], moves[h][3]] == king_coord:
            is_check = 1
            break
    return is_check


def possible_move(color):
    moves = []
    massiv = simple_move(color)
    for d in range(len(massiv)):
        piece = Board[massiv[d][2]][massiv[d][3]]
        Board[massiv[d][2]][massiv[d][3]] = Board[massiv[d][0]][massiv[d][1]]
        Board[massiv[d][0]][massiv[d][1]] = '.'
        Board[massiv[d][2]][massiv[d][3]].x = massiv[d][2]
        Board[massiv[d][2]][massiv[d][3]].y = massiv[d][3]
        if check(color) == 0:
            moves.append(massiv[d])
        Board[massiv[d][0]][massiv[d][1]] = Board[massiv[d][2]][massiv[d][3]]
        Board[massiv[d][2]][massiv[d][3]] = piece
        Board[massiv[d][0]][massiv[d][1]].x = massiv[d][0]
        Board[massiv[d][0]][massiv[d][1]].y = massiv[d][1]
    return moves


def fen_code():
    global moves50, move_turn, move_number, cast, enpassant  # добавить взятия на проходе
    empt = 0
    fen_ret = ''
    for a in range(8):
        for b in range(8):
            if Board[a][b] == '.':
                empt += 1
            if Board[a][b] != '.':
                if empt != 0:
                    fen_ret += str(empt)
                    empt = 0
                fen_ret += Board[a][b].__str__()
        if empt != 0:
            fen_ret += str(empt)
            empt = 0
        fen_ret += '/'
    fen_ret = fen_ret[:len(fen_ret) - 1]
    fen_ret += " " + ("w" if move_turn == 1 else "b") + " "
    if cast == [0, 0, 0, 0]:
        fen_ret += "-"
    else:
        if cast[0] != 0:
            fen_ret += "K"
        if cast[1] != 0:
            fen_ret += "Q"
        if cast[2] != 0:
            fen_ret += 'k'
        if cast[3] != 0:
            fen_ret += "q"
    if not enpassant:
        fen_ret += " "  # сюда взятие на проходе
        fen_ret += "- "
    fen_ret += str(moves50) + " " + str(move_number)
    return fen_ret


def uci_move(classification, move):
    global move_turn
    if classification == 1:
        string = chr(ord("a") + move[1]) + str(8 - move[0]) + chr(ord("a") + move[3]) + str(8 - move[2])
        return string
    if classification == 2:
        if move_turn == 0:
            if move == "short_castle":
                return "e1g1"
            else:
                return "e1c1"
        else:
            if move == "short_castle":
                return "e8g8"
            else:
                return "e8c8"
    if classification == 3:
        string = chr(ord("a") + move[1]) + str(8 - move[0]) + chr(ord("a") + move[3]) + str(8 - move[2])
        return string
    if classification == 4:
        return move


class Piece(object):
    IMG = None

    def __init__(self, color, x, y):
        self.color = color
        self.x = x
        self.y = y

    def __str__(self):
        return self.IMG[0 if self.color == 0 else 1]


class Pawn(Piece):
    IMG = ('p', 'P')

    def moves(self):
        just_promotion = [[self.x, self.y, (1 - self.color) * 7, self.y, str(self.x) + str(self.y) + "knight"],
                          [self.x, self.y, (1 - self.color) * 7, self.y, str(self.x) + str(self.y) + "bishop"],
                          [self.x, self.y, (1 - self.color) * 7, self.y, str(self.x) + str(self.y) + "rook"],
                          [self.x, self.y, (1 - self.color) * 7, self.y, str(self.x) + str(self.y) + "queen"]]
        plus_promotion = [
            [self.x, self.y, (1 - self.color) * 7, self.y + 1, str(self.x) + str(self.y) + "take_+1_knight"],
            [self.x, self.y, (1 - self.color) * 7, self.y + 1, str(self.x) + str(self.y) + "take_+1_bishop"],
            [self.x, self.y, (1 - self.color) * 7, self.y + 1, str(self.x) + str(self.y) + "take_+1_rook"],
            [self.x, self.y, (1 - self.color) * 7, self.y + 1, str(self.x) + str(self.y) + "take_+1_queen"]]
        minus_promotion = [
            [self.x, self.y, (1 - self.color) * 7, self.y - 1, str(self.x) + str(self.y) + "take_-1_knight"],
            [self.x, self.y, (1 - self.color) * 7, self.y - 1, str(self.x) + str(self.y) + "take_-1_bishop"],
            [self.x, self.y, (1 - self.color) * 7, self.y - 1, str(self.x) + str(self.y) + "take_-1_rook"],
            [self.x, self.y, (1 - self.color) * 7, self.y - 1, str(self.x) + str(self.y) + "take_-1_queen"]]
        moves = []
        cells = [1, -1]
        a = (-self.color) * 2 + 1
        b = (1 - self.color) * 5 + 1
        if self.color + 1 <= self.x <= self.color + 5 and Board[self.x + a][self.y] == '.':
            moves.append([self.x, self.y, self.x + a, self.y])
            if self.x == self.color * 5 + 1 and Board[self.x + a * 2][self.y] == '.':
                moves.append([self.x, self.y, self.x + a * 2, self.y])
        if self.x == b and Board[self.x + a][self.y] == '.':
            moves += just_promotion
        for j in range(2):
            if self.color + 1 <= self.x <= self.color + 5 and 0 < self.y + cells[j] < 7 and Board[self.x + a][
                self.y + cells[j]] != '.' and abs(self.color - Board[self.x + a][self.y + cells[j]].color) == 1:
                moves.append([self.x, self.y, self.x + a, self.y + cells[j]])
            if self.x == b and 0 < self.y + cells[j] < 7 and Board[self.x + a][self.y + cells[j]] != '.' and abs(
                    self.color - Board[self.x + a][self.y + cells[j]].color) == 1:
                if cells[j] == 1:
                    moves += plus_promotion
                else:
                    moves += minus_promotion
        return moves


class Knight(Piece):
    IMG = ('n', 'N')

    def moves(self):
        moves = []
        cells = [[-1, -2], [-2, -1], [-2, 1], [-1, 2], [1, 2], [2, 1], [2, -1], [1, -2]]
        for j in range(8):
            xnew = self.x + cells[j][0]
            ynew = self.y + cells[j][1]
            if 0 <= xnew <= 7 and 0 <= ynew <= 7 and (Board[xnew][ynew] == '.' or abs(self.color - Board[xnew][ynew].color) == 1):
                moves.append([self.x, self.y, xnew, ynew])
        return moves


class Bishop(Piece):
    IMG = ('b', 'B')

    def moves(self):
        moves = []
        cells = [[1, 1], [1, -1], [-1, 1], [-1, -1]]
        for j in range(4):
            xnew = self.x + cells[j][0]
            ynew = self.y + cells[j][1]
            while 0 <= xnew <= 7 and 0 <= ynew <= 7:
                if Board[xnew][ynew] == '.':
                    moves.append([self.x, self.y, xnew, ynew])
                    xnew += cells[j][0]
                    ynew += cells[j][1]
                else:
                    if abs(self.color - Board[xnew][ynew].color) == 1:
                        moves.append([self.x, self.y, xnew, ynew])
                    break
        return moves


class Rook(Piece):
    IMG = ('r', 'R')

    def moves(self):
        moves = []
        cells = [[1, 0], [-1, 0], [0, 1], [0, -1]]
        for j in range(4):
            xnew = self.x + cells[j][0]
            ynew = self.y + cells[j][1]
            while 0 <= xnew <= 7 and 0 <= ynew <= 7:
                if Board[xnew][ynew] == '.':
                    moves.append([self.x, self.y, xnew, ynew])
                    xnew += cells[j][0]
                    ynew += cells[j][1]
                else:
                    if abs(self.color - Board[xnew][ynew].color) == 1:
                        moves.append([self.x, self.y, xnew, ynew])
                    break
        return moves


class Queen(Piece):
    IMG = ('q', 'Q')

    def moves(self):
        moves = []
        moves += Rook(self.color, self.x, self.y).moves()
        moves += Bishop(self.color, self.x, self.y).moves()
        return moves


class King(Piece):
    IMG = ('k', 'K')

    def moves(self):
        king_cells = [[-1, -1], [0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0]]
        moves = []
        for j in range(len(king_cells)):
            xnew = self.x + king_cells[j][0]
            ynew = self.y + king_cells[j][1]
            if 0 <= xnew <= 7 and 0 <= ynew <= 7 and (Board[xnew][ynew] == '.' or abs(Board[xnew][ynew].color - self.color) == 1):
                moves.append([self.x, self.y, xnew, ynew])
        return moves


def print_board():
    printboard = ''
    for y in range(8):
        printboard += ''.join(map(str, Board[y])) + "\n"
    return printboard


def do_move(moven):
    Board[moven[2]][moven[3]] = Board[moven[0]][moven[1]]
    Board[moven[2]][moven[3]].x = moven[2]
    Board[moven[2]][moven[3]].y = moven[3]
    Board[moven[0]][moven[1]] = '.'


def promotion(color, typ):
    typ = typ[4]
    if len(typ) <= 8:
        ynew = int(typ[1])
        piece = typ[2:]
    else:
        piece = typ[10:]
        if typ[7] == "-":
            ynew = int(typ[1]) - 1
        else:
            ynew = int(typ[1]) + 1
    Board[int(typ[0])][int(typ[1])] = '.'
    Board[7 - 7 * color][ynew] = '.'
    yn = str(chr(ord('a') + ynew)) + str(8 - 7 + 7 * color)
    if piece == "knight":
        Board[7 - 7 * color][ynew] = Knight(color, 7 - 7 * color, ynew)
        return yn + "=N"
    if piece == "bishop":
        Board[7 - 7 * color][ynew] = Bishop(color, 7 - 7 * color, ynew)
        return yn + "=B"
    if piece == "rook":
        Board[7 - 7 * color][ynew] = Rook(color, 7 - 7 * color, ynew)
        return yn + "=R"
    if piece == "queen":
        Board[7 - 7 * color][ynew] = Queen(color, 7 - 7 * color, ynew)
        return yn + "=Q"


def castle_move(color, typo):
    vert = color * 7
    if typo == 'short_castle':
        Board[vert][6] = Board[vert][4]
        Board[vert][6].x = vert
        Board[vert][6].y = 6
        Board[vert][4] = '.'
        Board[vert][5] = Board[vert][7]
        Board[vert][5].x = vert
        Board[vert][5].y = 5
        Board[vert][7] = '.'
    if typo == 'long_castle':
        Board[vert][2] = Board[vert][4]
        Board[vert][2].x = vert
        Board[vert][2].y = 2
        Board[vert][4] = '.'
        Board[vert][3] = Board[vert][0]
        Board[vert][3].x = vert
        Board[vert][3].y = 3
        Board[vert][0] = '.'


# should it exist?
def game_result(moven):
    flag = 0
    global moves50, result
    if Board[moven[0]][moven[1]].__str__() not in ['p', 'P']:
        moves50 += 1
        flag = 1
    else:
        moves50 = 0
    if Board[moven[2]][moven[3]] not in ['p', 'P', 'q', 'Q', 'k', 'K', 'n', 'N', 'b', 'B', 'r', 'R']:
        if flag != 1:
            moves50 += 1
    else:
        moves50 = 0
    if moves50 == 101:
        result = '1/2-1/2'


def mate(moves):
    global result, move_turn
    if moves == [] and check(move_turn) == 0:
        result = '1/2-1/2'
    if moves == [] and check(move_turn) == 1:
        if move_turn == 1:
            result = '0-1'
        else:
            result = '1-0'


def fen_get():
    global fen, move_turn, cast, moves50, move_number, Board, king_coord, opposite_king_coord, pawn_value, bishop_value, knight_value, rook_value, queen_value, knight_value
    Board = [[], [], [], [], [], [], [], []]
    for y in range(8):
        Board[y] = ['.', '.', '.', '.', '.', '.', '.', '.']
    amount_of_slash = 0
    j = 0
    x = 0
    y = 0
    fir = 0
    while j < len(fen):
        if 49 <= ord(fen[j]) <= 56:
            y += int(fen[j])
        if fen[j] == 'r':
            Board[x][y] = Rook(0, x, y)
            y += 1
        if fen[j] == 'R':
            Board[x][y] = Rook(1, x, y)
            y += 1
        if fen[j] == 'k' and amount_of_slash < 8:
            Board[x][y] = King(0, x, y)
            opposite_king_coord = [x, y]
            y += 1
        if fen[j] == 'K' and amount_of_slash < 8:
            Board[x][y] = King(1, x, y)
            king_coord = [x, y]
            y += 1
        if fen[j] == 'b' and amount_of_slash < 8:
            Board[x][y] = Bishop(0, x, y)
            y += 1
        if fen[j] == 'B':
            Board[x][y] = Bishop(1, x, y)
            y += 1
        if fen[j] == 'p':
            Board[x][y] = Pawn(0, x, y)
            y += 1
        if fen[j] == 'P':
            Board[x][y] = Pawn(1, x, y)
            y += 1
        if fen[j] == 'q' and amount_of_slash < 8:
            Board[x][y] = Queen(0, x, y)
            y += 1
        if fen[j] == 'Q' and amount_of_slash < 8:
            Board[x][y] = Queen(1, x, y)
            y += 1
        if fen[j] == 'n':
            Board[x][y] = Knight(0, x, y)
            y += 1
        if fen[j] == 'N':
            Board[x][y] = Knight(1, x, y)
            y += 1  # j += 1?
        if fen[j] == '/':
            x += 1
            y = 0
            amount_of_slash += 1
        # взятия на проходе
        if fen[j] == ' ':
            amount_of_slash += 1
        if fen[j] == 'w':
            move_turn = 1
        if fen[j] == 'b' and amount_of_slash >= 8:
            move_turn = 0
            king_coord += [opposite_king_coord[0], opposite_king_coord[1]]
            opposite_king_coord = [king_coord[0], king_coord[1]]
            king_coord = [king_coord[2], king_coord[3]]
        if amount_of_slash >= 8 and fen[j] == 'K':
            cast[0] = True
        if amount_of_slash >= 8 and fen[j] == 'Q':
            cast[1] = True
        if amount_of_slash >= 8 and fen[j] == 'k':
            cast[2] = True
        if amount_of_slash >= 8 and fen[j] == 'q':
            cast[3] = True
        if amount_of_slash >= 8 and 48 <= ord(fen[j]) <= 57 and fir == 0:
            st = fen[j]
            while 48 <= ord(fen[j]) <= 57 and j < len(fen) - 1:
                j += 1
                st += fen[j]
            moves50 = int(st)
            fir = 1
        if amount_of_slash >= 8 and 48 <= ord(fen[j]) <= 57 and fir == 1:
            st = fen[j]
            while 48 <= ord(fen[j]) <= 57 and j < len(fen) - 1:
                j += 1
                st += fen[j]
            move_number = int(st)
        j += 1


def en_passant(moven, color):
    color = 1 - color
    enpas = []
    if Board[moven[0]][moven[1]].__str__() not in ['p', 'P']:
        return 0
    if abs(moven[2] - moven[0]) != 2:
        return 0
    a = -2 * color + 1
    if moven[3] != 7:
        if Board[moven[2]][moven[3] + 1] != '.' and Board[moven[2]][moven[3] + 1].__str__() in ['P', 'p'] and \
                Board[moven[2]][moven[3] + 1].color == color:
            strings = "en_passant" + str(moven[2]) + str(moven[3])
            lst = [moven[2], moven[3] + 1, moven[2] + a, moven[3], strings]
            enpas.append(lst)
    if moven[3] != 0:
        if Board[moven[2]][moven[3] - 1] != '.' and Board[moven[2]][moven[3] - 1].__str__() in ['P', 'p'] and \
                Board[moven[2]][moven[3] - 1].color == color:
            strings = "en_passant" + str(moven[2]) + str(moven[3])
            lst = [moven[2], moven[3] - 1, moven[2] + a, moven[3], strings]
            enpas.append(lst)
    if len(enpas) != 0:
        return enpas
    else:
        return 0


def do_enpassant(moven):
    s = moven[4][10:]
    x = int(s[0])
    y = int(s[1])
    do_move(moven)
    Board[x][y] = '.'


def check_en_passant(mover, color):
    s = mover[4][10:]
    x = int(s[0])
    y = int(s[1])
    Board[mover[2]][mover[3]] = Board[mover[0]][mover[1]]
    Board[mover[2]][mover[3]].x = mover[2]
    Board[mover[2]][mover[3]].y = mover[3]
    Board[mover[0]][mover[1]] = '.'
    Board[x][y] = '.'
    if check(color) == 0:
        Board[x][y] = Pawn(1 - color, x, y)
        Board[mover[0]][mover[1]] = Board[mover[2]][mover[3]]
        Board[mover[0]][mover[1]].x = mover[0]
        Board[mover[0]][mover[1]].y = mover[1]
        Board[mover[2]][mover[3]] = '.'
        return 0
    else:
        Board[x][y] = Pawn(1 - color, x, y)
        Board[mover[0]][mover[1]] = Board[mover[2]][mover[3]]
        Board[mover[0]][mover[1]].x = mover[0]
        Board[mover[0]][mover[1]].y = mover[1]
        Board[mover[2]][mover[3]] = '.'
        return 1


def all_moves():
    global fen, move_turn
    if result == '*':
        mate(possible_move(move_turn))
        if result != '*':
            return []
        cur_moves = possible_move(move_turn)
        castle_check()
        cur_moves += castle_m(move_turn)
        for y in range(len(enpassant)):
            if check_en_passant(enpassant[y], move_turn) == 0:
                cur_moves.append(enpassant[y])
        return cur_moves


def move_decision(move):
    global moves50, move_turn, cast, move_number
    if move_turn == 1:
        move_turn = 0
    else:
        move_turn = 1
        move_number += 1
    if str(type(move)) == "<class 'list'>" and len(move) == 4:
        if Board[move[0]][move[1]].__str__() not in ["p", "P"]:
            moves50 += 1
        else:
            moves50 = 0
        do_move(move)
        castle_check()
        return uci_move(1, move)
    if str(type(move)) == "<class 'str'>":
        castle_move(1 - move_turn, move)
        moves50 += 1
        castle_check()
        return uci_move(2, move)
    if move[4][:10] == "en_passant":
        do_enpassant(move)
        moves50 = 0
        castle_check()
        return uci_move(3, move)
    else:
        moves50 = 0
        castle_check()
        return uci_move(4, promotion(1 - move_turn, move))


def enumeration():
    global start_fen, move_turn, fen, material_imbalance, fen_same
    moves = all_moves()
    sequence = []
    seq = []
    evals = []
    for k in range(len(moves)):
        sequence.append([move_decision(moves[k]), fen_code(), evaluation()])
        evals.append([k, sequence[k][2], material_imbalance])
        fen_get()  # to start position
        material_imbalance = False
    lena = len(evals)
    if move_turn == 1:
        best = - 1000000
        for h in range(lena):
            if evals[h][1] > best and not evals[h][2]:
                best = evals[h][1]
    else:
        best = 1000000
        for h in range(lena):
            if evals[h][1] < best and not evals[h][2]:
                best = evals[h][1]
    h = 0
    while h < lena:
        if not evals[h][2] and abs(best - evals[h][1]) >= 30:
            evals.pop(h)
            lena -= 1
        # if evals[h][2]:
        #     # print(material_disbalance(sequence[evals[h][0]][1], best, sequence[evals[h][0]][0]))
        #     # st = perf_counter()
        #     if material_disbalance(sequence[evals[h][0]][1], best, sequence[evals[h][0]][0]) == 0:
        #         # analitics.append(perf_counter() - st)
        #         evals.pop(h)
        #         lena -= 1
        #         h -= 1
        else:
            h += 1
    if reached_depth <= 5:
        lena = len(evals)
        y = 0
        while y < lena:
            fenar = sequence[evals[y][0]][1]
            fenar = fenar[:len(fenar) - 4]
            if fenar in fen_same:
                lena -= 1
                evals.pop(y)
            else:
                y += 1
        lena = len(evals)
        z = 0
        while z < lena:
            fc = sequence[evals[z][0]][1]
            fc = fc[:len(fc) - 4]
            z += 1
            fen_same.append(fc)
    for h in range(lena):
        seq.append(sequence[evals[h][0]])
    return seq


def material_difference():
    global pawn_value, bishop_value, knight_value, rook_value, queen_value, knight_value
    evalu = 0
    for k in range(8):
        for p in range(8):
            if Board[k][p] != '.':
                if Board[k][p].__str__() == 'p':
                    evalu -= pawn_value
                if Board[k][p].__str__() == 'n':
                    evalu -= knight_value
                if Board[k][p].__str__() == 'b':
                    evalu -= bishop_value
                if Board[k][p].__str__() == 'r':
                    evalu -= rook_value
                if Board[k][p].__str__() == 'q':
                    evalu -= queen_value
                if Board[k][p].__str__() == 'k':
                    evalu -= king_value
                if Board[k][p].__str__() == 'P':
                    evalu += pawn_value
                if Board[k][p].__str__() == 'N':
                    evalu += knight_value
                if Board[k][p].__str__() == 'B':
                    evalu += bishop_value
                if Board[k][p].__str__() == 'R':
                    evalu += rook_value
                if Board[k][p].__str__() == 'Q':
                    evalu += queen_value
                if Board[k][p].__str__() == 'K':
                    evalu += king_value
    return evalu


def evaluation():
    global material_imbalance
    evalu = material_difference()
    if evalu != 0:
        material_imbalance = True
    evalu += opening()
    return evalu


def opening():
    global Board, move_number, move_turn, cast

    def check_queen():  # in fen_get()
        for a in range(7):
            for b in range(7):
                if Board[a][b] != '.' and Board[a][b].__str__() == chr(ord("Q") + 32 * (1 - move_turn)):
                    return 1
        return 0

    evalu = 0
    if Board[4][3] != '.' and Board[4][3].__str__() == 'P':  # d4
        evalu += 50
        # if Board[3][5] != '.' and Board[3][5].__str__() == 'p':
        #     evalu += 20 # WHAT IS THAT?
        if move_number in [1, 2] and Board[3][4] != '.' and Board[3][4].__str__() == 'p':  # d4-e5
            evalu += 50
    if Board[3][3] != '.' and Board[3][3].__str__() == 'p':
        evalu -= 50
        if move_turn == 1 and move_number in [1, 2] and Board[4][4] != '.' and Board[4][4].__str__() == 'P':
            evalu += 40
    if Board[4][4] != '.' and Board[4][4].__str__() == 'P':
        evalu += 60
    if Board[3][4] != '.' and Board[3][4].__str__() == 'p':
        evalu -= 60
    if Board[5][0] != '.' and Board[5][0].__str__() == 'N':
        evalu -= 50
    if Board[5][7] != '.' and Board[5][7].__str__() == 'N':
        evalu -= 50
    if Board[2][0] != '.' and Board[2][0].__str__() == 'n':
        evalu += 50
    if Board[2][7] != '.' and Board[2][7].__str__() == 'n':
        evalu += 50
    if Board[5][2] != '.' and Board[5][2].__str__() == 'N':
        evalu += 40
        if Board[6][2] != '.' and Board[6][2].__str__() == 'P':
            evalu -= 20
    if Board[5][5] != '.' and Board[5][5].__str__() == 'N':
        evalu += 40
        if Board[3][4] != '.' and Board[3][4].__str__() == 'p' and move_number == 2:
            evalu += 50
    if Board[2][2] != '.' and Board[2][2].__str__() == 'n':
        evalu -= 40
        if Board[1][2] != '.' and Board[1][2].__str__() == 'p':
            evalu += 20
    if Board[2][5] != '.' and Board[2][5].__str__() == 'n':
        evalu -= 40
    if Board[5][2] != '.' and Board[5][2].__str__() == 'P':
        evalu += 20
    if Board[2][2] != '.' and Board[2][2].__str__() == 'p':
        evalu -= 20
    if Board[2][3] != '.' and Board[2][3].__str__() == 'p':
        evalu -= 10
    if Board[5][3] != '.' and Board[5][3].__str__() == 'P':
        evalu += 10
    if Board[1][5] == '.':  # check if we have opposite color queen
        evalu += 80
        if check_queen() == 0:
            evalu -= 70
        if Board[1][7] == '.':
            if check_queen() == 0:
                evalu -= 45
            evalu += 60
    if Board[6][5] == '.':
        if check_queen() == 0:
            evalu += 70
        evalu -= 80
        if Board[6][7] == '.':
            if check_queen() == 0:
                evalu += 45
            evalu -= 60
    if Board[3][5] != '.' and Board[3][5].__str__() == 'p':
        evalu -= 20
    if Board[4][5] != '.' and Board[4][5].__str__() == 'P':
        evalu += 20
    if Board[5][0] != '.' and Board[5][0].__str__() == 'P':
        evalu += 10
    if Board[2][0] != '.' and Board[2][0].__str__() == 'p':
        evalu -= 10
    if Board[5][1] != '.' and Board[5][1].__str__() == 'P':
        evalu += 20
    if Board[2][1] != '.' and Board[2][1].__str__() == 'p':
        evalu -= 20
    if Board[5][7] != '.' and Board[5][7].__str__() == 'P':
        evalu += 20
    if Board[2][7] != '.' and Board[2][7].__str__() == 'p':
        evalu -= 20
    if cast[0] != 2:
        evalu -= 90
    if cast[1] != -3:
        evalu -= 15
    if cast[2] != 2:
        evalu += 90
    if cast[3] != -3:
        evalu += 15
    if Board[4][6] != '.' and Board[4][6].__str__() == 'P':
        evalu -= 130
    if Board[3][6] != '.' and Board[4][6].__str__() == 'p':
        evalu += 130
    if Board[4][1] != '.' and Board[4][1].__str__() == 'P':
        evalu -= 50
    if Board[3][1] != '.' and Board[3][1].__str__() == 'p':
        evalu += 50
    if Board[5][4] != '.' and Board[5][4].__str__() == 'P':
        evalu += 35
        if Board[5][3] == '.' or Board[5][3].__str__() != 'P':
            evalu -= 30
        if Board[5][2] == '.' or Board[5][2].__str__() != 'P':
            evalu -= 35
    if Board[2][4] != '.' and Board[2][4].__str__() == 'p':
        evalu -= 35
        if Board[2][3] == '.' or Board[2][3].__str__() != 'p':
            evalu += 30
        if Board[2][2] == '.' or Board[2][2].__str__() != 'p':
            evalu += 35
    if Board[5][6] != '.' and Board[5][6].__str__() == 'P':
        evalu += 15
    if Board[2][6] != '.' and Board[2][6].__str__() == 'p':
        evalu -= 15
    if Board[4][7] != '.' and Board[4][7].__str__() == 'P':
        evalu -= 30
    if Board[3][7] != '.' and Board[3][7].__str__() == 'p':
        evalu += 30
    if Board[3][2] != '.' and Board[3][2].__str__() == 'p':
        evalu -= 40
    if Board[4][2] != '.' and Board[4][2].__str__() == 'P':
        evalu += 40
    # Добавить оценку позиций слонов
    # Добавить оцнеку слабых и изолированных пешек
    # Добавить оценку положениям ферзя. чтобы машина не стремилась ходить ферзём в некоторых позициях
    # Добавить, чтобы оно не ходило одной и той же фигурой дважды
    if Board[0][1] == '.' or Board[0][1].__str__() != 'n':
        if Board[2][0] == '.' or Board[2][0].__str__() != 'n':
            if Board[2][2] == '.' or Board[2][2].__str__() != 'n':
                if Board[1][3] == '.' or Board[1][3].__str__() != 'n':
                    evalu += 50
    if Board[0][6] == '.' or Board[0][6].__str__() != 'n':
        if Board[2][7] == '.' or Board[2][7].__str__() != 'n':
            if Board[2][5] == '.' or Board[2][5].__str__() != 'n':
                if Board[1][4] == '.' or Board[1][4].__str__() != 'n':
                    evalu += 50
    return evalu


def material_disbalance(fent, best, s):  # here is the imbalanced position
    global fen, move_turn, material_imbalance
    move_turn = 1 - move_turn
    # set Board to norm?
    # seq = []
    fen = fent
    fen_get()
    posmoves = all_moves()
    for k in range(len(posmoves)):
        s = s + " " + move_decision(posmoves[k])
        e = evaluation()
        if not material_imbalance and abs(best - e) <= 30:  # clearly 0.6?
            return 0
            # seq.append([s, fen_code(), e])
            # break
        if check(move_turn) == 1:
            return 1
            # seq.append([s, fen_code(), e])
        fen = fent
        fen_get()
        material_imbalance = False
    move_turn = 1 - move_turn
    return 0


def read_str(st):
    mars = []
    start = 1
    for count in range(len(st)):
        if st[count] == ',':
            mars.append(st[start:count-1])
            start = count + 2
    return mars


def search():
    global start_fen, fen, filename, reached_depth, fen_same
    nodes = 0
    time_for_nodes = perf_counter()
    start_fen = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
    fen = start_fen
    fen_get()
    got = enumeration()
    nodes += len(got)
    with open("first.txt", "w") as f:
        for d in range(len(got)):
            f.write(str(got[d])[1:len(str(got[d])) - 1])
            f.write("\n")
    reached_depth += 1
    while reached_depth <= depth:
        with open(filename[0], "r") as file:
            previous = [1]
            with open(filename[1], "w") as f2:
                while previous:
                    previous = read_str(file.readline())
                    if previous:
                        fen = previous[1]
                        fen_get()
                        got = enumeration()
                        nodes += len(got)
                        for f in range(len(got)):
                            got[f][0] = previous[0] + " " + got[f][0]
                        for f in range(len(got)):
                            f2.write(str(got[f])[1:len(str(got[f])) - 1])
                            f2.write("\n")
        fen_same = []
        filename = [filename[1], filename[0]]
        reached_depth += 1
        print(reached_depth)
    time_for_nodes = perf_counter() - time_for_nodes
    return [nodes, time_for_nodes]


def main():
    mas = search()
    print("Reached depth: ", reached_depth)
    print("Positions checked: ", mas[0])
    print("Time used: ", mas[1])
    print(str(mas[0] // mas[1]) + " positions per second")
    print("WSOC #9.3.4.10")


if __name__ == "__main__":
    main()
